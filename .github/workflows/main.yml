name: "release"
on:
  push:
    branches:
      - main
jobs:
  publish-tauri:
    if: contains(github.event.head_commit.message, 'release:app')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-22.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential \
          libssl-dev libgtk-3-dev tree \
          curl wget file libxau-dev libpng-dev \
          libappindicator3-dev libgdk-pixbuf2.0-dev \
          librsvg2-dev libfuse2 \
          libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.  
      
      - name: Install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Set Up .env
        run: |
          echo "VITE_API_BASE_URL=${{secrets.VITE_API_BASE_URL}}" >> .env

      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: venv
          auto-activate-base: true
          channels: conda-forge,defaults
          python-version: 3.12

      - name: Build backend with PyInstaller (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          conda install -n venv -c conda-forge gdal geopandas pyogrio -y;
          conda run -n venv pip install --no-cache-dir -r backend/requirements.txt;
          conda run -n venv pyinstaller backend/apppy.py -y --distpath backend/ --specpath backend/ --workpath backend/build --name apppy `
            --add-data "$env:CONDA/envs/venv/Library/share/proj;Library/share/proj" `
            --hidden-import=pyogrio._geometry --hidden-import=pyogrio._io --collect-data=numpy;
  
      - name: Build backend with PyInstaller
        if: matrix.platform != 'windows-latest'
        run: |
          conda install -n venv -c conda-forge gdal geopandas pyogrio -y
          conda run -n venv pip install --no-cache-dir -r backend/requirements.txt
          conda run -n venv pyinstaller backend/apppy.py -y --distpath backend/ --specpath backend/ --workpath backend/build --name apppy \
          --add-data "$CONDA/envs/venv/share/proj:share/proj" \
          --hidden-import=pyogrio._geometry --hidden-import=pyogrio._io --collect-data=numpy
        shell: bash

      - name: Copy AppImage dependency to /usr/lib/ (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: sudo cp -r backend/apppy/_internal/* /usr/lib/

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: Nutri-View-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "Nutri View v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          includeDebug: false
          includeRelease: true
          args: ${{ matrix.args }}

      - name: Debug with tmate on failure
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3